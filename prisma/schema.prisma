// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// =========================================
// SECTION 1: CORE USER & DRIVER TABLES
// =========================================

// Defines different vehicle types available in the system
model VehicleType {
  id          Int      @id @default(autoincrement())
  name        String   @db.VarChar(50) // "car", "motorcycle", "bicycle", "truck"
  displayName String   @db.VarChar(50) // "Carro", "Moto", "Bicicleta", "Camión"
  icon        String? // URL del ícono
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @default(now()) @updatedAt @map("updated_at")

  // Relations
  vehicles Vehicle[]
  rides   Ride[]   @relation("RequestedVehicleType")
  tiers       TierVehicleType[]

  // Performance indexes
  @@index([isActive])

  @@map("vehicle_types")
}

// Detailed vehicle information for drivers - allows multiple vehicles per driver
model Vehicle {
  id              Int      @id @default(autoincrement())
  driverId        Int      @map("driver_id")
  vehicleTypeId   Int      @map("vehicle_type_id")
  make            String   @db.VarChar(50) // Toyota, Honda, etc.
  model           String   @db.VarChar(100) // Corolla, Civic, etc.
  year            Int // Manufacturing year
  color           String?  @db.VarChar(30) // Red, Blue, etc.
  licensePlate    String   @unique @db.VarChar(20)
  vin             String?  @unique @db.VarChar(17) // Vehicle Identification Number
  seatingCapacity Int      @default(4) // Number of passenger seats
  hasAC           Boolean  @default(true) @map("has_ac")
  hasGPS          Boolean  @default(true) @map("has_gps")
  fuelType        String   @default("gasoline") @db.VarChar(20) // gasoline, diesel, electric, hybrid

  // Insurance information
  insuranceProvider   String? @map("insurance_provider") @db.VarChar(100)
  insurancePolicyNumber String? @map("insurance_policy_number") @db.VarChar(50)
  insuranceExpiryDate DateTime? @map("insurance_expiry_date")

  // Vehicle images
  frontImageUrl       String? @map("front_image_url")
  sideImageUrl        String? @map("side_image_url")
  backImageUrl        String? @map("back_image_url")
  interiorImageUrl    String? @map("interior_image_url")

  // Status and verification
  status              String   @default("active") @db.VarChar(20) // active, inactive, suspended, maintenance
  verificationStatus  String   @default("pending") @map("verification_status") @db.VarChar(20) // pending, verified, rejected
  isDefault           Boolean  @default(false) @map("is_default") // Is this the driver's primary vehicle

  createdAt           DateTime @default(now()) @map("created_at")
  updatedAt           DateTime @default(now()) @updatedAt @map("updated_at")

  // Relations
  driver          Driver                     @relation(fields: [driverId], references: [id], onDelete: Cascade)
  vehicleType     VehicleType                @relation(fields: [vehicleTypeId], references: [id])
  vehicleDocuments VehicleDocument[]
  rides           Ride[]                     @relation("VehicleRides")
  vehicleHistory  VehicleChangeHistory[]
  driverReports   DriverReport[]

  // Performance indexes for matching
  @@index([driverId, isDefault])
  @@index([vehicleTypeId, status])
  @@index([status, verificationStatus])

  @@map("vehicles")
}

// Documents specifically for vehicle verification
model VehicleDocument {
  id                 Int      @id @default(autoincrement())
  vehicleId          Int      @map("vehicle_id")
  documentType       String   @map("document_type") @db.VarChar(50) // registration, insurance, inspection, permit
  documentUrl        String   @map("document_url")
  uploadedAt         DateTime @default(now()) @map("uploaded_at")
  verificationStatus String   @default("pending") @map("verification_status") @db.VarChar(20)
  verifiedAt         DateTime? @map("verified_at")
  verifiedBy         Int?     @map("verified_by") // Admin user ID
  rejectionReason    String?  @map("rejection_reason")

  // Relations
  vehicle Vehicle @relation(fields: [vehicleId], references: [id], onDelete: Cascade)

  @@map("vehicle_documents")
}

// History of vehicle changes for audit trail
model VehicleChangeHistory {
  id           Int      @id @default(autoincrement())
  vehicleId    Int      @map("vehicle_id")
  driverId     Int      @map("driver_id")
  changeType   String   @map("change_type") @db.VarChar(50) // update, status_change, verification_change
  oldValue     Json?    @map("old_value")
  newValue     Json?    @map("new_value")
  reason       String?  @map("reason")
  changedBy    Int?     @map("changed_by") // Admin user ID who made the change
  changedAt    DateTime @default(now()) @map("changed_at")

  // Relations
  vehicle Vehicle @relation(fields: [vehicleId], references: [id], onDelete: Cascade)
  driver  Driver  @relation(fields: [driverId], references: [id], onDelete: Cascade)

  @@map("vehicle_change_history")
}

model User {
  id        Int       @id @default(autoincrement())
  name      String    @db.VarChar(100)
  email     String    @unique @db.VarChar(100)
  password  String?   @db.VarChar(255) // Hashed password for authentication
  refreshToken String? @db.VarChar(255) // Hashed refresh token
  isActive  Boolean   @default(true) @map("is_active")
  lastLogin DateTime? @map("last_login")
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @default(now()) @updatedAt @map("updated_at")

  // Profile information
  phone        String?   @db.VarChar(20)
  dateOfBirth  DateTime? @map("date_of_birth")
  gender       String?   @db.VarChar(20)
  profileImage String?   @map("profile_image")
  address      String?   @db.VarChar(255)
  city         String?   @db.VarChar(100)
  state        String?   @db.VarChar(100)
  country      String?   @db.VarChar(100)
  postalCode   String?   @map("postal_code") @db.VarChar(20)

  // Preferences
  preferredLanguage String? @default("es") @map("preferred_language") @db.VarChar(10)
  timezone          String? @default("America/Caracas") @db.VarChar(50)
  currency          String? @default("USD") @db.VarChar(10)

  // Verification status
  emailVerified    Boolean @default(false) @map("email_verified")
  phoneVerified    Boolean @default(false) @map("phone_verified")
  identityVerified Boolean @default(false) @map("identity_verified")

  // Admin-specific fields
  userType         String?   @default("user") @map("user_type")
  adminRole        String?   @map("admin_role") @db.VarChar(20)
  adminPermissions String[]  @default([]) @map("admin_permissions")
  lastAdminLogin   DateTime? @map("last_admin_login")
  adminCreatedAt   DateTime? @map("admin_created_at")
  adminUpdatedAt   DateTime? @updatedAt @map("admin_updated_at")

  // Relations
  rides                   Ride[]
  deliveryOrders          DeliveryOrder[]
  wallet                  Wallet?
  ratings                 Rating[]
  emergencyContacts       EmergencyContact[]
  sentMessages            ChatMessage[]            @relation("MessageSender")
  receivedRatings         Rating[]                 @relation("RatedUser")
  notificationPreferences NotificationPreferences?
  pushTokens              PushToken[]
  notifications           Notification[]
  ownedStores             Store[]

  // New services relations
  errands          Errand[]
  parcels          Parcel[]
  cart             Cart?

  // Venezuelan payment system relations
  paymentReferences PaymentReference[]
  paymentGroups     PaymentGroup[]

  // Admin-specific relations
  adminAuditLogs AdminAuditLog[]

  @@map("users")
}


// Stores driver/courier information, their vehicle, and status
model Driver {
  id                 Int      @id @default(autoincrement())
  firstName          String   @map("first_name") @db.VarChar(50)
  lastName           String   @map("last_name") @db.VarChar(50)
  email              String?  @unique @db.VarChar(100) // Driver's email
  phone              String?  @db.VarChar(20) // Driver's phone number

  // Address information
  address            String?  @db.VarChar(255)
  city               String?  @db.VarChar(100)
  state              String?  @db.VarChar(100)
  postalCode         String?  @map("postal_code") @db.VarChar(20)

  // Profile information
  profileImageUrl    String?  @map("profile_image_url")
  dateOfBirth        DateTime? @map("date_of_birth")
  gender             String?  @db.VarChar(20)
  status             String   @default("offline") @db.VarChar(20) // online, offline, busy, suspended
  verificationStatus String   @default("pending") @map("verification_status") @db.VarChar(20)
  canDoDeliveries    Boolean  @default(false) @map("can_do_deliveries")
  carSeats           Int      @default(4) @map("car_seats") // Number of passenger seats in vehicle

  // Location tracking fields
  currentLatitude    Decimal? @map("current_latitude") @db.Decimal(9, 6)
  currentLongitude   Decimal? @map("current_longitude") @db.Decimal(9, 6)
  lastLocationUpdate DateTime? @map("last_location_update")
  locationAccuracy   Decimal? @map("location_accuracy") @db.Decimal(5, 2) // GPS accuracy in meters
  isLocationActive   Boolean  @default(false) @map("is_location_active") // Whether driver is actively sharing location

  // Work preferences
  preferredWorkZones String[] @default([]) @map("preferred_work_zones") // Array of zone IDs
  workSchedule       Json?    @map("work_schedule") // Preferred working hours/days

  // Financial information
  bankAccountNumber  String?  @map("bank_account_number") @db.VarChar(50)
  bankName           String?  @map("bank_name") @db.VarChar(100)
  taxId              String?  @map("tax_id") @db.VarChar(20)

  // Ratings and performance
  averageRating      Decimal? @default(0.00) @map("average_rating") @db.Decimal(3, 2)
  totalRides         Int      @default(0) @map("total_rides")
  totalEarnings      Decimal  @default(0.00) @map("total_earnings") @db.Decimal(10, 2)
  completionRate     Decimal  @default(0.00) @map("completion_rate") @db.Decimal(5, 2) // Percentage of completed rides

  // Status management
  suspensionReason   String?  @map("suspension_reason")
  suspensionEndDate  DateTime? @map("suspension_end_date")
  lastStatusChange   DateTime? @map("last_status_change")
  statusChangedBy    Int?     @map("status_changed_by") // Admin who changed status

  // Audit fields
  createdAt          DateTime @default(now()) @map("created_at")
  updatedAt          DateTime @default(now()) @updatedAt @map("updated_at")
  lastLogin          DateTime? @map("last_login")
  lastActive         DateTime? @map("last_active")

  // Relations
  vehicles            Vehicle[]
  documents           DriverDocument[]
  rides               Ride[]
  deliveryOrders      DeliveryOrder[]
  errands             Errand[]
  parcels             Parcel[]
  locationHistory     DriverLocationHistory[]
  driverReports       DriverReport[]
  vehicleHistory      VehicleChangeHistory[]
  driverPayments      DriverPayment[]
  driverPaymentMethods DriverPaymentMethod[]
  driverVerificationHistory DriverVerificationHistory[]
  workZoneAssignments DriverWorkZone[]


  // Performance indexes for matching algorithm
  @@index([status, verificationStatus])
  @@index([status, verificationStatus, canDoDeliveries])
  @@index([status, lastLocationUpdate])
  @@index([isLocationActive, lastLocationUpdate])
  @@index([averageRating, totalRides])

  @@map("drivers")
}

// Stores driver verification documents
model DriverDocument {
  id                 Int      @id @default(autoincrement())
  driverId           Int      @map("driver_id")
  documentType       String   @map("document_type") @db.VarChar(50)
  documentUrl        String   @map("document_url")
  uploadedAt         DateTime @default(now()) @map("uploaded_at")
  verificationStatus String   @default("pending") @map("verification_status") @db.VarChar(20)

  // Relations
  driver Driver @relation(fields: [driverId], references: [id], onDelete: Cascade)

  @@map("driver_documents")
}

// Stores historical location data for drivers
model DriverLocationHistory {
  id               Int      @id @default(autoincrement())
  driverId         Int      @map("driver_id")
  latitude         Decimal  @db.Decimal(9, 6)
  longitude        Decimal  @db.Decimal(9, 6)
  accuracy         Decimal? @db.Decimal(5, 2) // GPS accuracy in meters
  speed            Decimal? @db.Decimal(5, 2) // Speed in m/s
  heading          Decimal? @db.Decimal(5, 2) // Direction in degrees (0-360)
  altitude         Decimal? @db.Decimal(7, 2) // Altitude in meters
  rideId           Int?     @map("ride_id") // Associated ride if tracking during ride
  timestamp        DateTime @default(now())
  source           String   @default("gps") @db.VarChar(20) // 'gps', 'wifi', 'manual', etc.

  // Relations
  driver Driver @relation(fields: [driverId], references: [id], onDelete: Cascade)
  ride   Ride?  @relation(fields: [rideId], references: [rideId])

  @@index([driverId, timestamp])
  @@index([rideId])
  @@map("driver_location_history")
}

// =========================================
// SECTION 2: RIDE-SHARING TABLES
// =========================================

// Defines different ride tiers and their pricing structure
model RideTier {
  id            Int     @id @default(autoincrement())
  name          String  @db.VarChar(50)
  baseFare      Decimal @map("base_fare") @db.Decimal(10, 2)
  perMinuteRate Decimal @map("per_minute_rate") @db.Decimal(10, 2)
  perMileRate   Decimal @map("per_mile_rate") @db.Decimal(10, 2)
  imageUrl      String? @map("image_url")

  // Tier-specific multipliers
  tierMultiplier     Decimal @default(1.0) @db.Decimal(3, 2) // Base multiplier for this tier
  surgeMultiplier    Decimal @default(1.0) @db.Decimal(3, 2) // Surge pricing multiplier
  demandMultiplier   Decimal @default(1.0) @db.Decimal(3, 2) // Demand-based multiplier
  luxuryMultiplier   Decimal @default(1.0) @db.Decimal(3, 2) // Luxury service multiplier
  comfortMultiplier  Decimal @default(1.0) @db.Decimal(3, 2) // Comfort features multiplier

  // Operational settings
  minPassengers      Int @default(1)     // Minimum passengers
  maxPassengers      Int @default(4)     // Maximum passengers
  isActive          Boolean @default(true) @map("is_active")
  priority          Int @default(1)      // Display priority (higher = more prominent)

  // Relations
  rides         Ride[]
  vehicleTypes  TierVehicleType[]

  @@map("ride_tiers")
}

// Temporal pricing rules for dynamic pricing based on time
model TemporalPricingRule {
  id            Int      @id @default(autoincrement())
  name          String   @db.VarChar(100) // Rule name (e.g., "Morning Peak", "Weekend Surcharge")
  description   String?  @db.VarChar(255) // Rule description

  // Rule type and configuration
  ruleType      String   @default("time_range") @map("rule_type") @db.VarChar(20)
  // time_range, day_of_week, date_specific, seasonal

  // Time-based conditions
  startTime     String?  @map("start_time") @db.VarChar(5) // HH:MM format (e.g., "07:00")
  endTime       String?  @map("end_time") @db.VarChar(5)   // HH:MM format (e.g., "09:00")
  daysOfWeek    Json?    @map("days_of_week") // Array of day numbers (0=Sunday, 6=Saturday)
  specificDates Json?    @map("specific_dates") // Array of YYYY-MM-DD dates
  dateRanges    Json?    @map("date_ranges") // Array of {start: YYYY-MM-DD, end: YYYY-MM-DD}

  // Pricing multiplier
  multiplier    Decimal  @default(1.0) @db.Decimal(3, 2) // Pricing multiplier (e.g., 1.4 = 40% surcharge)
  priority      Int      @default(1) // Rule priority (higher = applied first)

  // Geographic scope (optional)
  countryId     Int?     @map("country_id")
  stateId       Int?     @map("state_id")
  cityId        Int?     @map("city_id")
  zoneId        Int?     @map("zone_id")

  // Operational settings
  isActive      Boolean  @default(true) @map("is_active")
  autoApply     Boolean  @default(true) @map("auto_apply") // Auto-apply or manual override

  // Metadata
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @default(now()) @updatedAt @map("updated_at")

  // Relations
  country       Country? @relation(fields: [countryId], references: [id], onDelete: Cascade)
  state         State?   @relation(fields: [stateId], references: [id], onDelete: Cascade)
  city          City?    @relation(fields: [cityId], references: [id], onDelete: Cascade)
  zone          ServiceZone? @relation(fields: [zoneId], references: [id], onDelete: Cascade)

  @@index([ruleType, isActive])
  @@index([countryId, stateId, cityId, zoneId])
  @@index([priority])
  @@map("temporal_pricing_rules")
}

// Feature flags for dynamic feature toggling
model FeatureFlag {
  id            Int      @id @default(autoincrement())
  name          String   @db.VarChar(100) // Feature name (e.g., "new_payment_flow")
  key           String   @unique @db.VarChar(100) // Unique key for feature
  description   String?  @db.VarChar(255) // Feature description
  category      String   @db.VarChar(50) // Category (e.g., "payments", "rides", "admin")
  isEnabled     Boolean  @default(false) @map("is_enabled") // Feature enabled/disabled

  // Configuration
  config        Json?    // Additional configuration data
  rolloutPercentage Int?  @default(100) @map("rollout_percentage") // Percentage rollout (0-100)

  // Targeting (optional)
  userRoles     Json?    @map("user_roles") // Array of user roles this applies to
  userIds       Json?    @map("user_ids")   // Array of specific user IDs
  environments  Json?    @map("environments") // Array of environments ("dev", "staging", "prod")

  // Operational settings
  isActive      Boolean  @default(true) @map("is_active") // Flag is active
  autoEnable    Boolean  @default(false) @map("auto_enable") // Auto-enable after creation

  // Metadata
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @default(now()) @updatedAt @map("updated_at")
  createdBy     String?  @map("created_by") @db.VarChar(100) // Admin user who created
  updatedBy     String?  @map("updated_by") @db.VarChar(100) // Admin user who updated

  @@index([key, isActive])
  @@index([category, isEnabled])
  @@index([isEnabled, rolloutPercentage])
  @@map("feature_flags")
}

// System configuration parameters
model SystemConfig {
  id            Int      @id @default(autoincrement())
  key           String   @unique @db.VarChar(100) // Config key
  value         String   @db.Text // Config value (JSON string)
  type          String   @db.VarChar(20) // Value type: "string", "number", "boolean", "json"
  category      String   @db.VarChar(50) // Category (e.g., "payments", "rides", "notifications")
  description   String?  @db.VarChar(255) // Description of the config
  isEncrypted   Boolean  @default(false) @map("is_encrypted") // Whether value is encrypted

  // Validation
  validation    Json?    // Validation rules (min, max, pattern, etc.)
  defaultValue  String?  @map("default_value") // Default value

  // Operational
  isActive      Boolean  @default(true) @map("is_active")
  requiresRestart Boolean @default(false) @map("requires_restart") // Requires app restart

  // Metadata
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @default(now()) @updatedAt @map("updated_at")
  createdBy     String?  @map("created_by") @db.VarChar(100)
  updatedBy     String?  @map("updated_by") @db.VarChar(100)

  @@index([category, isActive])
  @@index([key, isActive])
  @@map("system_configs")
}

// Notification templates and settings
model NotificationTemplate {
  id            Int      @id @default(autoincrement())
  name          String   @db.VarChar(100) // Template name
  key           String   @unique @db.VarChar(100) // Unique key
  type          String   @db.VarChar(30) // Type: "email", "push", "sms", "in_app"
  category      String   @db.VarChar(50) // Category: "rides", "payments", "admin", etc.

  // Content
  subject       String?  @db.VarChar(255) // Subject for email/push
  body          String   @db.Text // Template body with placeholders
  variables     Json?    // Available variables for template

  // Configuration
  priority      String   @default("normal") @db.VarChar(20) // "low", "normal", "high", "urgent"
  isActive      Boolean  @default(true) @map("is_active")

  // Metadata
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @default(now()) @updatedAt @map("updated_at")
  createdBy     String?  @map("created_by") @db.VarChar(100)
  updatedBy     String?  @map("updated_by") @db.VarChar(100)

  @@index([type, category, isActive])
  @@index([key, isActive])
  @@map("notification_templates")
}

// API keys for external service integrations
model APIKey {
  id            Int      @id @default(autoincrement())
  name          String   @db.VarChar(100) // Human readable name (e.g., "Stripe Production")
  service       String   @db.VarChar(50) // Service name (e.g., "stripe", "twilio", "firebase")
  environment   String   @db.VarChar(20) // Environment ("development", "staging", "production")
  keyType       String   @db.VarChar(30) // Type ("secret", "public", "private_key", "access_token")

  // Encrypted key data
  encryptedKey  String   @db.Text // Encrypted API key
  keyHash       String?  @db.VarChar(128) // Hash for integrity verification

  // Key metadata
  description   String?  @db.VarChar(255)
  expiresAt     DateTime? // Expiration date
  lastRotated   DateTime? // Last rotation timestamp
  rotationPolicy String? @db.VarChar(50) // "manual", "auto_30d", "auto_90d", "auto_1y"

  // Security settings
  isActive      Boolean  @default(true) // Key is active
  isPrimary     Boolean  @default(false) // Primary key for service/environment
  accessLevel   String   @db.VarChar(20) // "read", "write", "admin", "full"

  // Usage tracking
  lastUsed      DateTime?
  usageCount    Int      @default(0)
  errorCount    Int      @default(0)
  rateLimit     Int?     // Requests per minute limit

  // Metadata
  createdAt     DateTime @default(now())
  updatedAt     DateTime @default(now()) @updatedAt
  createdBy     String?  @db.VarChar(100)
  updatedBy     String?  @db.VarChar(100)

  // Tags for organization
  tags          Json?    // Array of tags for filtering

  // Relations
  audits        APIKeyAudit[] // Audit log entries for this key

  @@unique([service, environment, keyType, isPrimary], name: "unique_primary_key")
  @@index([service, environment, isActive])
  @@index([service, isPrimary])
  @@index([expiresAt])
  @@index([lastUsed])
  @@map("api_keys")
}

// Audit log for API key operations
model APIKeyAudit {
  id            Int      @id @default(autoincrement())
  apiKeyId      Int      @map("api_key_id")
  action        String   @db.VarChar(50) // "created", "updated", "rotated", "accessed", "deactivated"
  oldValue      String?  @db.Text // Previous encrypted value
  newValue      String?  @db.Text // New encrypted value
  metadata      Json?    // Additional context

  performedBy   String?  @db.VarChar(100) // User who performed action
  performedAt   DateTime @default(now())
  ipAddress     String?  @db.VarChar(45) // IPv4/IPv6 address
  userAgent     String?  @db.VarChar(500)

  // Relations
  apiKey        APIKey   @relation(fields: [apiKeyId], references: [id], onDelete: Cascade)

  @@index([apiKeyId, performedAt])
  @@index([action, performedAt])
  @@map("api_key_audits")
}

// Integration status monitoring
model IntegrationStatus {
  id            Int      @id @default(autoincrement())
  service       String   @db.VarChar(50) // Service name
  environment   String   @db.VarChar(20) // Environment
  status        String   @db.VarChar(20) // "healthy", "degraded", "down", "maintenance"

  // Status details
  lastChecked   DateTime @default(now())
  responseTime  Int?     // Response time in ms
  errorMessage  String?  @db.Text
  version       String?  @db.VarChar(50) // API version

  // Health metrics
  uptimePercentage Decimal? @default(100.0) @db.Decimal(5, 2) // Last 30 days
  errorRate      Decimal? @default(0.0) @db.Decimal(5, 2) // Last 24 hours

  // Alert settings
  alertEnabled   Boolean  @default(true)
  alertThreshold Int      @default(5) // Minutes without successful check

  @@unique([service, environment])
  @@index([status, lastChecked])
  @@index([alertEnabled, lastChecked])
  @@map("integration_status")
}

// Relations

// Defines valid combinations between tiers and vehicle types
model TierVehicleType {
  id            Int         @id @default(autoincrement())
  tierId        Int         @map("tier_id")
  vehicleTypeId Int         @map("vehicle_type_id")
  isActive      Boolean     @default(true) @map("is_active")
  createdAt     DateTime    @default(now()) @map("created_at")

  // Relations
  tier          RideTier    @relation(fields: [tierId], references: [id], onDelete: Cascade)
  vehicleType   VehicleType @relation(fields: [vehicleTypeId], references: [id], onDelete: Cascade)

  @@unique([tierId, vehicleTypeId])
  @@index([tierId, isActive])
  @@index([vehicleTypeId, isActive])
  @@map("tier_vehicle_types")
}

// Stores information about each ride
model Ride {
  rideId                 Int       @id @default(autoincrement()) @map("ride_id")
  originAddress          String    @map("origin_address") @db.VarChar(255)
  destinationAddress     String    @map("destination_address") @db.VarChar(255)
  originLatitude         Decimal   @map("origin_latitude") @db.Decimal(9, 6)
  originLongitude        Decimal   @map("origin_longitude") @db.Decimal(9, 6)
  destinationLatitude    Decimal   @map("destination_latitude") @db.Decimal(9, 6)
  destinationLongitude   Decimal   @map("destination_longitude") @db.Decimal(9, 6)
  rideTime               Int       @map("ride_time")
  farePrice              Decimal   @map("fare_price") @db.Decimal(10, 2)
  paymentStatus          String    @map("payment_status") @db.VarChar(20)
  status                 String    @default("pending") @db.VarChar(20) // 'pending', 'driver_confirmed', 'accepted', 'arrived', 'in_progress', 'completed', 'cancelled'
  driverId               Int?      @map("driver_id")
  userId                 Int       @map("user_id")
  tierId                 Int?      @map("tier_id")
  vehicleId              Int?      @map("vehicle_id") // Vehicle used for this ride
  requestedVehicleTypeId Int?      @map("requested_vehicle_type_id") // Tipo de vehículo solicitado
  scheduledFor           DateTime? @map("scheduled_for")
  // Cancellation fields
  cancelledAt            DateTime? @map("cancelled_at")
  cancelledBy            String?   @map("cancelled_by") // 'driver', 'passenger', 'system'
  cancellationReason     String?   @map("cancellation_reason")
  cancellationNotes      String?   @map("cancellation_notes")
  createdAt              DateTime  @default(now()) @map("created_at")
  updatedAt              DateTime  @default(now()) @updatedAt @map("updated_at")

  // Relations
  driver               Driver?                @relation(fields: [driverId], references: [id])
  tier                 RideTier?              @relation(fields: [tierId], references: [id])
  user                 User?                  @relation(fields: [userId], references: [id])
  vehicle              Vehicle?               @relation("VehicleRides", fields: [vehicleId], references: [id])
  driverReports        DriverReport[]
  cancellations        RideCancellation[]
  requestedVehicleType VehicleType?           @relation("RequestedVehicleType", fields: [requestedVehicleTypeId], references: [id])
  ratings              Rating[]
  messages             ChatMessage[]
  locationHistory      DriverLocationHistory[]

  @@map("rides")
}

// =========================================
// SECTION 3: MARKETPLACE & DELIVERY TABLES
// =========================================

// Represents businesses on the platform (restaurants, shops, etc.)
model Store {
  id          Int      @id @default(autoincrement())
  name        String   @db.VarChar(150)
  address     String   @db.VarChar(255)
  latitude    Decimal  @db.Decimal(9, 6)
  longitude   Decimal  @db.Decimal(9, 6)
  category    String?  @db.VarChar(50)
  cuisineType String?  @map("cuisine_type") @db.VarChar(50)
  logoUrl     String?  @map("logo_url")
  rating      Decimal  @default(0.00) @db.Decimal(3, 2)
  isOpen      Boolean  @default(true) @map("is_open")
  ownerId     Int?     @map("owner_id")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @default(now()) @updatedAt @map("updated_at")

  // Relations
  products       Product[]
  deliveryOrders DeliveryOrder[]
  ratings        Rating[]
  owner          User?           @relation(fields: [ownerId], references: [id])

  @@map("stores")
}

// Represents items sold by stores
model Product {
  id          Int     @id @default(autoincrement())
  storeId     Int     @map("store_id")
  name        String  @db.VarChar(150)
  description String?
  price       Decimal @db.Decimal(10, 2)
  imageUrl    String? @map("image_url")
  category    String? @db.VarChar(50)
  stock       Int     @default(0)
  isAvailable Boolean @default(true) @map("is_available")

  // Relations
  store      Store       @relation(fields: [storeId], references: [id], onDelete: Cascade)
  orderItems OrderItem[]
  cartItems  CartItem[]

  @@map("products")
}

// Tracks a delivery order from creation to completion
model DeliveryOrder {
  orderId               Int       @id @default(autoincrement()) @map("order_id")
  userId                Int       @map("user_id")
  storeId               Int       @map("store_id")
  courierId             Int?      @map("courier_id")
  deliveryAddress       String    @map("delivery_address") @db.VarChar(255)
  deliveryLatitude      Decimal   @map("delivery_latitude") @db.Decimal(9, 6)
  deliveryLongitude     Decimal   @map("delivery_longitude") @db.Decimal(9, 6)
  totalPrice            Decimal   @map("total_price") @db.Decimal(10, 2)
  deliveryFee           Decimal   @map("delivery_fee") @db.Decimal(10, 2)
  tip                   Decimal   @default(0.00) @db.Decimal(10, 2)
  status                String    @default("pending") @db.VarChar(50)
  paymentStatus         String    @default("pending") @map("payment_status") @db.VarChar(20)
  estimatedDeliveryTime DateTime? @map("estimated_delivery_time")
  actualDeliveryTime    DateTime? @map("actual_delivery_time")
  createdAt             DateTime  @default(now()) @map("created_at")

  // Relations
  user       User?         @relation(fields: [userId], references: [id])
  store      Store         @relation(fields: [storeId], references: [id])
  courier    Driver?       @relation(fields: [courierId], references: [id])
  orderItems OrderItem[]
  ratings    Rating[]
  messages   ChatMessage[]

  @@map("delivery_orders")
}

// Join table for products within a delivery order
model OrderItem {
  id              Int     @id @default(autoincrement())
  orderId         Int     @map("order_id")
  productId       Int     @map("product_id")
  quantity        Int
  priceAtPurchase Decimal @map("price_at_purchase") @db.Decimal(10, 2)

  // Relations
  order   DeliveryOrder @relation(fields: [orderId], references: [orderId], onDelete: Cascade)
  product Product       @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@map("order_items")
}

// =========================================
// SECTION 4: SHARED & GENERAL PURPOSE TABLES
// =========================================

// Manages promotional codes and discounts for rides or deliveries
model Promotion {
  id                 Int       @id @default(autoincrement())
  promoCode          String    @unique @map("promo_code") @db.VarChar(50)
  discountPercentage Decimal?  @map("discount_percentage") @db.Decimal(5, 2)
  discountAmount     Decimal?  @map("discount_amount") @db.Decimal(10, 2)
  expiryDate         DateTime? @map("expiry_date")
  isActive           Boolean   @default(true) @map("is_active")

  @@map("promotions")
}

// Manages user wallet balances
model Wallet {
  id        Int      @id @default(autoincrement())
  userId    Int      @unique @map("user_id")
  balance   Decimal  @default(0.00) @db.Decimal(10, 2)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")

  // Relations
  user               User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  walletTransactions WalletTransaction[]

  @@map("wallets")
}

// Tracks all wallet transactions (credits and debits)
model WalletTransaction {
  id              Int      @id @default(autoincrement())
  walletId        Int      @map("wallet_id")
  amount          Decimal  @db.Decimal(10, 2)
  transactionType String   @map("transaction_type") @db.VarChar(20)
  description     String?
  referenceType   String?  @map("reference_type") // 'ride_cancellation', 'order_cancellation', 'payment_refund', etc.
  referenceId     String?  @map("reference_id") // ID del objeto relacionado
  createdAt       DateTime @default(now()) @map("created_at")

  // Relations
  wallet Wallet @relation(fields: [walletId], references: [id], onDelete: Cascade)

  @@map("wallet_transactions")
}

// Stores ratings for rides, deliveries, or stores
model Rating {
  id            Int      @id @default(autoincrement())
  rideId        Int?     @map("ride_id")
  orderId       Int?     @map("order_id")
  storeId       Int?     @map("store_id")
  ratedByUserId Int      @map("rated_by_user_id")
  ratedUserId   Int?     @map("rated_user_id")
  ratingValue   Int      @map("rating_value")
  comment       String?
  createdAt     DateTime @default(now()) @map("created_at")

  // Relations
  ride      Ride?          @relation(fields: [rideId], references: [rideId])
  order     DeliveryOrder? @relation(fields: [orderId], references: [orderId])
  store     Store?         @relation(fields: [storeId], references: [id])
  ratedBy   User           @relation(fields: [ratedByUserId], references: [id])
  ratedUser User?          @relation("RatedUser", fields: [ratedUserId], references: [id])

  @@map("ratings")
}

// Stores emergency contacts for users
model EmergencyContact {
  id           Int    @id @default(autoincrement())
  userId       Int    @map("user_id")
  contactName  String @map("contact_name") @db.VarChar(100)
  contactPhone String @map("contact_phone") @db.VarChar(20)

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("emergency_contacts")
}

// Stores chat messages for rides, deliveries, errands, and parcels
model ChatMessage {
  id          Int      @id @default(autoincrement())
  rideId      Int?     @map("ride_id")
  orderId     Int?     @map("order_id")
  errandId      Int?     @map("errand_id")
  parcelId      Int?     @map("parcel_id")
  senderId    Int      @map("sender_id")
  messageText String   @map("message_text")
  createdAt   DateTime @default(now()) @map("created_at")

  // Relations
  ride    Ride?          @relation(fields: [rideId], references: [rideId])
  order   DeliveryOrder? @relation(fields: [orderId], references: [orderId])
  errand  Errand?        @relation(fields: [errandId], references: [id])
  parcel  Parcel?        @relation(fields: [parcelId], references: [id])
  sender  User           @relation("MessageSender", fields: [senderId], references: [id])

  @@map("chat_messages")
}

// =========================================
// SECTION 5: NOTIFICATION SYSTEM TABLES
// =========================================

// Stores user notification preferences
model NotificationPreferences {
  id              Int      @id @default(autoincrement())
  userId          Int      @unique @map("user_id")
  pushEnabled     Boolean  @default(true) @map("push_enabled")
  smsEnabled      Boolean  @default(false) @map("sms_enabled")
  emailEnabled    Boolean  @default(false) @map("email_enabled")
  rideUpdates     Boolean  @default(true) @map("ride_updates")
  driverMessages  Boolean  @default(true) @map("driver_messages")
  promotional     Boolean  @default(false) @map("promotional")
  emergencyAlerts Boolean  @default(true) @map("emergency_alerts")
  createdAt       DateTime @default(now()) @map("created_at")
  updatedAt       DateTime @default(now()) @updatedAt @map("updated_at")

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("notification_preferences")
}

// Stores push notification tokens for devices
model PushToken {
  id         Int       @id @default(autoincrement())
  userId     Int       @map("user_id")
  token      String    @unique @db.VarChar(255)
  deviceType String?   @map("device_type") @db.VarChar(20) // 'ios', 'android', 'web'
  deviceId   String?   @map("device_id") @db.VarChar(255)
  isActive   Boolean   @default(true) @map("is_active")
  lastUsedAt DateTime? @map("last_used_at")
  createdAt  DateTime  @default(now()) @map("created_at")
  updatedAt  DateTime  @default(now()) @updatedAt @map("updated_at")

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, isActive])
  @@map("push_tokens")
}

// Stores notification history and delivery status
model Notification {
  id          Int       @id @default(autoincrement())
  userId      Int       @map("user_id")
  type        String    @db.VarChar(50) // 'ride_accepted', 'driver_arrived', etc.
  title       String    @db.VarChar(255)
  message     String?
  data        Json? // Additional data for the notification
  isRead      Boolean   @default(false) @map("is_read")
  pushSent    Boolean   @default(false) @map("push_sent")
  pushSentAt  DateTime? @map("push_sent_at")
  smsSent     Boolean   @default(false) @map("sms_sent")
  smsSentAt   DateTime? @map("sms_sent_at")
  emailSent   Boolean   @default(false) @map("email_sent")
  emailSentAt DateTime? @map("email_sent_at")
  createdAt   DateTime  @default(now()) @map("created_at")
  readAt      DateTime? @map("read_at")

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, createdAt])
  @@index([type, createdAt])
  @@map("notifications")
}

// =========================================
// ADMIN AUDIT SYSTEM TABLES
// =========================================

// Stores audit logs for admin actions
model AdminAuditLog {
  id         Int      @id @default(autoincrement())
  adminId    Int      @map("admin_id") // References User.id for admin users
  action     String   @db.VarChar(100) // 'create', 'update', 'delete', 'login', etc.
  resource   String   @db.VarChar(50) // 'user', 'driver', 'ride', etc.
  resourceId String?  @map("resource_id") @db.VarChar(50)
  oldValue   Json?    @map("old_value")
  newValue   Json?    @map("new_value")
  ipAddress  String?  @map("ip_address") @db.VarChar(45)
  userAgent  String?  @map("user_agent") @db.Text
  timestamp  DateTime @default(now())
  createdAt  DateTime @default(now()) @map("created_at")

  // Relation to admin user
  admin User @relation(fields: [adminId], references: [id], onDelete: Cascade)

  @@map("admin_audit_logs")
}

// =========================================
// VENEZUELAN PAYMENT SYSTEM TABLES
// =========================================

// Stores bank payment references for Venezuelan payment system
model PaymentReference {
  id              Int       @id @default(autoincrement())
  referenceNumber String    @unique @db.VarChar(20) // 20-digit reference number
  bankCode        String    @db.VarChar(10) // Bank code (0102, 0105, etc.)
  amount          Decimal   @db.Decimal(10, 2) // Payment amount in VES
  currency        String    @default("VES") @db.VarChar(3)
  userId          Int       @map("user_id") // User who generated the reference
  serviceType     String    @db.VarChar(20) // 'ride', 'delivery', 'errand', 'parcel'
  serviceId       Int       @map("service_id") // ID of the service (rideId, orderId, etc.)
  paymentMethod   String    @db.VarChar(20) // 'transfer', 'pago_movil', 'zelle', 'bitcoin', 'cash'
  status          String    @default("pending") @db.VarChar(20) // 'pending', 'confirmed', 'expired', 'failed'
  isPartial       Boolean   @default(false) @map("is_partial") // True for partial payments
  groupId         String?   @map("group_id") // UUID for grouping multiple payments
  expiresAt       DateTime  @map("expires_at") // Reference expiration time
  confirmedAt     DateTime? @map("confirmed_at") // When payment was confirmed
  createdAt       DateTime  @default(now()) @map("created_at")
  updatedAt       DateTime  @default(now()) @updatedAt @map("updated_at")

  // Relations
  user             User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  paymentGroup     PaymentGroup?     @relation(fields: [groupId], references: [id], onDelete: SetNull)
  bankTransactions BankTransaction[]

  @@index([referenceNumber])
  @@index([userId, status])
  @@index([serviceType, serviceId])
  @@index([serviceType, serviceId, isPartial])
  @@index([groupId])
  @@index([expiresAt])
  @@map("payment_references")
}

// Tracks payment groups for multi-method payments
model PaymentGroup {
  id              String    @id @default(cuid()) // UUID for payment groups
  userId          Int       @map("user_id")
  serviceType     String    @db.VarChar(20) // 'ride', 'delivery', 'errand', 'parcel'
  serviceId       Int       @map("service_id") // ID of the service
  totalAmount     Decimal   @map("total_amount") @db.Decimal(10, 2) // Total amount to pay
  paidAmount      Decimal   @default(0.00) @map("paid_amount") @db.Decimal(10, 2) // Amount paid so far
  remainingAmount Decimal   @map("remaining_amount") @db.Decimal(10, 2) // Amount still needed
  status          String    @default("incomplete") @db.VarChar(20) // 'incomplete', 'complete', 'cancelled', 'expired'
  expiresAt       DateTime  @map("expires_at") // Group expiration (24 hours from first payment)
  completedAt     DateTime? @map("completed_at") // When payment was fully completed
  createdAt       DateTime  @default(now()) @map("created_at")
  updatedAt       DateTime  @default(now()) @updatedAt @map("updated_at")

  // Relations
  user              User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  paymentReferences PaymentReference[]

  @@index([userId])
  @@index([serviceType, serviceId])
  @@index([status])
  @@index([expiresAt])
  @@map("payment_groups")
}

// Stores confirmed bank transactions
model BankTransaction {
  id                    Int      @id @default(autoincrement())
  paymentReferenceId    Int      @map("payment_reference_id")
  bankTransactionId     String   @db.VarChar(100) // Transaction ID from bank
  bankResponse          Json     @map("bank_response") // Full response from bank API
  confirmedAmount       Decimal  @db.Decimal(10, 2) // Confirmed amount by bank
  confirmationTimestamp DateTime @map("confirmation_timestamp")
  createdAt             DateTime @default(now()) @map("created_at")

  // Relations
  paymentReference PaymentReference @relation(fields: [paymentReferenceId], references: [id], onDelete: Cascade)

  @@index([paymentReferenceId])
  @@index([bankTransactionId])
  @@map("bank_transactions")
}

// =========================================
// ERRAND SERVICE TABLES
// =========================================

// Stores errand requests where drivers perform personal tasks
model Errand {
  id                 Int      @id @default(autoincrement())
  userId             Int      @map("user_id")
  driverId           Int?     @map("driver_id")
  description        String   @db.VarChar(300)
  itemsList          String?  @db.Text
  pickupAddress      String   @db.VarChar(255)
  pickupLat          Decimal  @db.Decimal(9, 6)
  pickupLng          Decimal  @db.Decimal(9, 6)
  dropoffAddress     String   @db.VarChar(255)
  dropoffLat         Decimal  @db.Decimal(9, 6)
  dropoffLng         Decimal  @db.Decimal(9, 6)
  status             String   @default("requested") @db.VarChar(20)
  itemsCost          Decimal? @db.Decimal(10, 2)
  serviceFee         Decimal? @db.Decimal(10, 2)
  totalAmount        Decimal? @db.Decimal(10, 2)
  shoppingNotes      String?  @db.Text
  createdAt          DateTime @default(now()) @map("created_at")
  updatedAt          DateTime @default(now()) @updatedAt @map("updated_at")

  // Relations
  user     User         @relation(fields: [userId], references: [id])
  driver   Driver?      @relation(fields: [driverId], references: [id])
  messages ChatMessage[]

  @@map("errands")
}

// =========================================
// PARCEL SERVICE TABLES
// =========================================

// Stores parcel delivery requests
model Parcel {
  id                Int      @id @default(autoincrement())
  userId            Int      @map("user_id")
  driverId          Int?     @map("driver_id")
  pickupAddress     String   @db.VarChar(255)
  pickupLat         Decimal  @db.Decimal(9, 6)
  pickupLng         Decimal  @db.Decimal(9, 6)
  dropoffAddress    String   @db.VarChar(255)
  dropoffLat        Decimal  @db.Decimal(9, 6)
  dropoffLng        Decimal  @db.Decimal(9, 6)
  type              String   @db.VarChar(50) // 'documents', 'small_package', 'large_package'
  description       String?  @db.Text
  weight            Decimal? @db.Decimal(5, 2)
  dimensions        String?  @db.VarChar(50) // '20x15x10'
  status            String   @default("requested") @db.VarChar(20)
  serviceFee        Decimal? @db.Decimal(10, 2)
  totalAmount       Decimal? @db.Decimal(10, 2)
  proofOfPickup     String?  @map("proof_of_pickup") // Photo URL
  proofOfDelivery   String?  @map("proof_of_delivery") // Photo/Signature URL
  recipientName     String?  @map("recipient_name")
  recipientPhone    String?  @map("recipient_phone")
  createdAt         DateTime @default(now()) @map("created_at")
  updatedAt         DateTime @default(now()) @updatedAt @map("updated_at")

  // Relations
  user     User         @relation(fields: [userId], references: [id])
  driver   Driver?      @relation(fields: [driverId], references: [id])
  messages ChatMessage[]

  @@map("parcels")
}

// =========================================
// SHOPPING CART TABLES
// =========================================

// Stores user shopping carts
model Cart {
  id         Int      @id @default(autoincrement())
  userId     Int      @unique @map("user_id")
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @default(now()) @updatedAt @map("updated_at")

  // Relations
  user     User       @relation(fields: [userId], references: [id])
  items    CartItem[]

  @@map("carts")
}

// Stores items in shopping carts
model CartItem {
  id         Int     @id @default(autoincrement())
  cartId     Int     @map("cart_id")
  productId  Int     @map("product_id")
  quantity   Int     @default(1)
  notes      String? @db.VarChar(255)

  // Relations
  cart     Cart    @relation(fields: [cartId], references: [id], onDelete: Cascade)
  product  Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([cartId, productId])
  @@map("cart_items")
}

// =========================================
// DRIVER REPORTS TABLES
// =========================================

// Stores driver reports for issues during rides
model DriverReport {
  id                 Int       @id @default(autoincrement())
  rideId             Int       @map("ride_id")
  driverId           Int       @map("driver_id")
  vehicleId          Int?      @map("vehicle_id")
  reportType         String    @map("report_type") // 'traffic_jam', 'breakdown', 'accident', 'passenger_issue', 'other'
  description        String    @map("description")
  severity           String    @map("severity") // 'low', 'medium', 'high'
  locationLat        Decimal?  @map("location_lat") @db.Decimal(9, 6)
  locationLng        Decimal?  @map("location_lng") @db.Decimal(9, 6)
  estimatedDelay     Int?      @map("estimated_delay") // minutos
  requiresCancellation Boolean @default(false) @map("requires_cancellation")
  status             String    @default("reported") @map("status") // 'reported', 'acknowledged', 'resolved'
  adminNotes         String?   @map("admin_notes")
  reportedAt         DateTime  @default(now()) @map("reported_at")
  resolvedAt         DateTime? @map("resolved_at")

  // Relations
  ride    Ride    @relation(fields: [rideId], references: [rideId], onDelete: Cascade)
  driver  Driver  @relation(fields: [driverId], references: [id], onDelete: Cascade)
  vehicle Vehicle? @relation(fields: [vehicleId], references: [id])

  @@map("driver_reports")
}

// Ride cancellations with refund tracking
model RideCancellation {
  id                 Int       @id @default(autoincrement())
  rideId             Int       @map("ride_id")
  cancelledBy        String    @map("cancelled_by") // 'driver', 'passenger', 'system'
  reason             String    @map("reason")
  notes              String?   @map("notes")
  refundAmount       Decimal   @map("refund_amount") @db.Decimal(10, 2)
  refundProcessed    Boolean   @default(false) @map("refund_processed")
  locationLat        Decimal?  @map("location_lat") @db.Decimal(9, 6)
  locationLng        Decimal?  @map("location_lng") @db.Decimal(9, 6)
  cancelledAt        DateTime  @default(now()) @map("cancelled_at")

  // Relations
  ride Ride @relation(fields: [rideId], references: [rideId], onDelete: Cascade)

  @@map("ride_cancellations")
}

// =========================================
// DRIVER MANAGEMENT TABLES
// =========================================

// Payment methods available for drivers
model DriverPaymentMethod {
  id            Int      @id @default(autoincrement())
  driverId      Int      @map("driver_id")
  methodType    String   @db.VarChar(20) // 'bank_transfer', 'cash', 'wallet', 'crypto'
  accountNumber String?  @map("account_number") @db.VarChar(50)
  accountName   String?  @map("account_name") @db.VarChar(100)
  bankName      String?  @map("bank_name") @db.VarChar(100)
  routingNumber String?  @map("routing_number") @db.VarChar(20)
  swiftCode     String?  @map("swift_code") @db.VarChar(20)
  walletAddress String?  @map("wallet_address") @db.VarChar(100) // For crypto wallets
  isDefault     Boolean  @default(false) @map("is_default")
  isActive      Boolean  @default(true) @map("is_active")
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @default(now()) @updatedAt @map("updated_at")

  // Relations
  driver Driver @relation(fields: [driverId], references: [id], onDelete: Cascade)
  payments DriverPayment[]

  @@map("driver_payment_methods")
}

// Payment records for drivers (earnings)
model DriverPayment {
  id                Int      @id @default(autoincrement())
  driverId          Int      @map("driver_id")
  paymentMethodId   Int?     @map("payment_method_id")
  amount            Decimal  @db.Decimal(10, 2)
  currency          String   @default("USD") @db.VarChar(3)
  paymentType       String   @db.VarChar(20) // 'ride_earning', 'bonus', 'adjustment', 'deduction'
  referenceType     String   @db.VarChar(20) // 'ride', 'delivery', 'errand', 'parcel'
  referenceId       Int      @map("reference_id") // ID of the related service
  description       String?
  periodStart       DateTime? @map("period_start") // For weekly/monthly payments
  periodEnd         DateTime? @map("period_end")
  status            String   @default("pending") @db.VarChar(20) // 'pending', 'processed', 'failed', 'cancelled'
  processedAt       DateTime? @map("processed_at")
  transactionId     String?  @map("transaction_id") @db.VarChar(100) // Bank transaction ID
  notes             String?
  createdAt         DateTime @default(now()) @map("created_at")
  updatedAt         DateTime @default(now()) @updatedAt @map("updated_at")

  // Relations
  driver        Driver                @relation(fields: [driverId], references: [id], onDelete: Cascade)
  paymentMethod DriverPaymentMethod?  @relation(fields: [paymentMethodId], references: [id])

  @@index([driverId, createdAt])
  @@index([status, createdAt])
  @@map("driver_payments")
}

// Work zones for driver assignment
// WorkZone model replaced by ServiceZone - keeping for backward compatibility
model WorkZone {
  id          Int      @id @default(autoincrement())
  name        String   @db.VarChar(100)
  description String?
  city        String   @db.VarChar(100)
  state       String   @db.VarChar(100)
  coordinates Json     // GeoJSON polygon defining the zone
  isActive    Boolean  @default(true) @map("is_active")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @default(now()) @updatedAt @map("updated_at")

  // Relations
  driverAssignments DriverWorkZone[]

  @@map("work_zones")
}

// Driver work zone assignments
model DriverWorkZone {
  id         Int      @id @default(autoincrement())
  driverId   Int      @map("driver_id")
  zoneId     Int      @map("zone_id")
  assignedAt DateTime @default(now()) @map("assigned_at")
  assignedBy Int?     @map("assigned_by") // Admin user ID
  isPrimary  Boolean  @default(false) @map("is_primary")
  status     String   @default("active") @db.VarChar(20) // 'active', 'inactive', 'suspended'

  // Relations
  driver Driver  @relation(fields: [driverId], references: [id], onDelete: Cascade)
  zone   WorkZone @relation(fields: [zoneId], references: [id], onDelete: Cascade)

  @@unique([driverId, zoneId])
  @@map("driver_work_zones")
}

// History of driver verification changes
model DriverVerificationHistory {
  id                Int      @id @default(autoincrement())
  driverId          Int      @map("driver_id")
  previousStatus    String?  @map("previous_status") @db.VarChar(20)
  newStatus         String   @map("new_status") @db.VarChar(20)
  changeReason      String   @map("change_reason")
  additionalNotes   String?  @map("additional_notes")
  changedBy         Int      @map("changed_by") // Admin user ID
  changedAt         DateTime @default(now()) @map("changed_at")

  // Relations
  driver Driver @relation(fields: [driverId], references: [id], onDelete: Cascade)

  @@index([driverId, changedAt])
  @@map("driver_verification_history")
}

// =========================================
// SECTION 9: GEOGRAPHY & REGIONAL TABLES
// =========================================

// Country model for geographic management
model Country {
  id              Int      @id @default(autoincrement())
  name            String   @unique @db.VarChar(100) // Full country name
  isoCode2        String   @unique @map("iso_code_2") @db.VarChar(2) // ISO 3166-1 alpha-2
  isoCode3        String?  @unique @map("iso_code_3") @db.VarChar(3) // ISO 3166-1 alpha-3
  numericCode     Int?     @unique @map("numeric_code") // ISO 3166-1 numeric
  phoneCode       String?  @map("phone_code") @db.VarChar(10) // International dialing code
  currencyCode    String   @map("currency_code") @db.VarChar(3) // ISO 4217 currency code
  currencyName    String?  @map("currency_name") @db.VarChar(50) // Currency full name
  currencySymbol  String?  @map("currency_symbol") @db.VarChar(5) // Currency symbol
  timezone        String   @map("timezone") @db.VarChar(50) // Primary timezone (IANA format)
  continent       String   @map("continent") @db.VarChar(20) // Continent name
  region          String?  @map("region") @db.VarChar(50) // UN region
  subregion       String?  @map("subregion") @db.VarChar(50) // UN subregion

  // Tax and regulatory settings
  vatRate         Decimal? @map("vat_rate") @db.Decimal(5, 2) // Value Added Tax rate (%)
  corporateTaxRate Decimal? @map("corporate_tax_rate") @db.Decimal(5, 2) // Corporate tax rate (%)
  incomeTaxRate   Decimal? @map("income_tax_rate") @db.Decimal(5, 2) // Income tax rate (%)

  // Platform-specific settings
  isActive        Boolean  @default(true) @map("is_active") // Active for platform operations
  requiresVerification Boolean @default(false) @map("requires_verification") // Extra verification needed
  supportedLanguages Json? @map("supported_languages") // Array of language codes
  legalRequirements Json? @map("legal_requirements") // Specific legal requirements

  // Regional service configurations
  businessHours    Json? @map("business_hours") // Operating hours by day/week
  publicHolidays   Json? @map("public_holidays") // National holidays and restrictions
  timeRestrictions Json? @map("time_restrictions") // Curfews, rush hours, etc.
  regionalSettings Json? @map("regional_settings") // Custom settings per region

  // Pricing configurations
  pricingMultiplier Decimal @default(1.0) @map("pricing_multiplier") @db.Decimal(3, 2) // Regional pricing multiplier

  // Metadata
  flag            String?  @db.Text // Flag emoji or URL
  capital         String?  @db.VarChar(100) // Capital city name
  population      BigInt?  // Population count
  areaKm2         Decimal? @map("area_km2") @db.Decimal(12, 2) // Area in square kilometers

  createdAt       DateTime @default(now()) @map("created_at")
  updatedAt       DateTime @default(now()) @updatedAt @map("updated_at")

  // Relations
  states          State[]
  temporalPricingRules TemporalPricingRule[]

  @@map("countries")
}

// State/Province model for geographic management
model State {
  id          Int      @id @default(autoincrement())
  name        String   @db.VarChar(100) // Full state/province name
  code        String   @db.VarChar(10) // State/province code (e.g., "CA", "TX")
  countryId   Int      @map("country_id")

  // Geographic data
  latitude    Decimal? @db.Decimal(9, 6) // State center latitude
  longitude   Decimal? @db.Decimal(9, 6) // State center longitude
  timezone    String?  @db.VarChar(50) // State-specific timezone if different

  // Platform settings
  isActive    Boolean  @default(true) @map("is_active")
  pricingMultiplier Decimal @default(1.0) @map("pricing_multiplier") @db.Decimal(3, 2)
  serviceFee  Decimal? @map("service_fee") @db.Decimal(5, 2) // Additional service fee (%)

  // Regional configurations
  stateBusinessHours Json? @map("state_business_hours") // State-specific operating hours
  stateHolidays     Json? @map("state_holidays") // State-specific holidays
  localRestrictions Json? @map("local_restrictions") // State-specific restrictions
  stateSettings     Json? @map("state_settings") // Custom state settings

  // Metadata
  capital     String?  @db.VarChar(100) // Capital city name
  population  BigInt?
  areaKm2     Decimal? @map("area_km2") @db.Decimal(10, 2)

  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @default(now()) @updatedAt @map("updated_at")

  // Relations
  country     Country   @relation(fields: [countryId], references: [id], onDelete: Cascade)
  cities      City[]
  temporalPricingRules TemporalPricingRule[]

  @@unique([countryId, code])
  @@index([countryId, isActive])
  @@map("states")
}

// City model for geographic management
model City {
  id          Int      @id @default(autoincrement())
  name        String   @db.VarChar(100) // Full city name
  stateId     Int      @map("state_id")

  // Geographic data
  latitude    Decimal  @db.Decimal(9, 6)
  longitude   Decimal  @db.Decimal(9, 6)
  timezone    String?  @db.VarChar(50)

  // Boundaries (GeoJSON or simplified polygon)
  boundaries  Json?    // Geographic boundaries for the city

  // Platform settings
  isActive    Boolean  @default(true) @map("is_active")
  pricingMultiplier Decimal @default(1.0) @map("pricing_multiplier") @db.Decimal(3, 2)
  serviceFee  Decimal? @map("service_fee") @db.Decimal(5, 2)

  // Service zones and restrictions
  serviceRadius Int @default(50) @map("service_radius") // Service radius in km
  restrictedAreas Json? @map("restricted_areas") // Areas where service is restricted
  premiumZones Json? @map("premium_zones") // High-demand or premium areas

  // Local configurations
  cityBusinessHours Json? @map("city_business_hours") // City-specific operating hours
  cityHolidays     Json? @map("city_holidays") // City-specific holidays
  municipalLaws    Json? @map("municipal_laws") // Local regulations and restrictions
  citySettings     Json? @map("city_settings") // Custom city settings

  // Metadata
  population  BigInt?
  areaKm2     Decimal? @map("area_km2") @db.Decimal(10, 2)
  elevation   Int?     // Elevation in meters
  postalCodes Json?    @map("postal_codes") // Array of postal codes

  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @default(now()) @updatedAt @map("updated_at")

  // Relations
  state       State    @relation(fields: [stateId], references: [id], onDelete: Cascade)
  serviceZones ServiceZone[]
  temporalPricingRules TemporalPricingRule[]

  @@unique([stateId, name])
  @@index([stateId, isActive])
  @@index([latitude, longitude])
  @@map("cities")
}

// Service zones for operational management (advanced zoning system)
model ServiceZone {
  id          Int      @id @default(autoincrement())
  name        String   @db.VarChar(100)
  cityId      Int      @map("city_id")
  zoneType    String   @default("regular") @map("zone_type") @db.VarChar(20) // regular, premium, restricted

  // Geographic boundaries
  boundaries  Json     // GeoJSON polygon defining the zone
  centerLat   Decimal  @map("center_lat") @db.Decimal(9, 6)
  centerLng   Decimal  @map("center_lng") @db.Decimal(9, 6)

  // Zone settings
  isActive    Boolean  @default(true) @map("is_active")
  pricingMultiplier Decimal @default(1.0) @map("pricing_multiplier") @db.Decimal(3, 2)
  maxDrivers  Int?     @map("max_drivers") // Maximum drivers allowed in zone
  minDrivers  Int?     @map("min_drivers") // Minimum drivers required in zone

  // Operational settings
  peakHours   Json?    @map("peak_hours") // Peak hours configuration
  demandMultiplier Decimal @default(1.0) @map("demand_multiplier") @db.Decimal(3, 2) // Dynamic pricing

  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @default(now()) @updatedAt @map("updated_at")

  // Relations
  city        City     @relation(fields: [cityId], references: [id], onDelete: Cascade)
  temporalPricingRules TemporalPricingRule[]

  @@index([cityId, isActive])
  @@index([zoneType])
  @@map("service_zones")
}

// =========================================
// END OF SCHEMA
// =========================================
