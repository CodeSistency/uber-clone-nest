// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// =========================================
// SECTION 1: CORE USER & DRIVER TABLES
// =========================================

// Defines different vehicle types available in the system
model VehicleType {
  id          Int      @id @default(autoincrement())
  name        String   @db.VarChar(50) // "car", "motorcycle", "bicycle", "truck"
  displayName String   @db.VarChar(50) // "Carro", "Moto", "Bicicleta", "Camión"
  icon        String? // URL del ícono
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @default(now()) @updatedAt @map("updated_at")

  // Relations
  drivers Driver[]
  rides   Ride[]   @relation("RequestedVehicleType")
  tiers       TierVehicleType[]

  @@map("vehicle_types")
}

// Stores user information with support for regular users and administrators
model User {
  id        Int       @id @default(autoincrement())
  name      String    @db.VarChar(100)
  email     String    @unique @db.VarChar(100)
  password  String?   @db.VarChar(255) // Hashed password for authentication
  isActive  Boolean   @default(true) @map("is_active")
  lastLogin DateTime? @map("last_login")
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @default(now()) @updatedAt @map("updated_at")

  // Profile information
  phone        String?   @db.VarChar(20)
  dateOfBirth  DateTime? @map("date_of_birth")
  gender       String?   @db.VarChar(20) // 'male', 'female', 'other', 'prefer_not_to_say'
  profileImage String?   @map("profile_image") // URL to profile image
  address      String?   @db.VarChar(255)
  city         String?   @db.VarChar(100)
  state        String?   @db.VarChar(100)
  country      String?   @db.VarChar(100)
  postalCode   String?   @map("postal_code") @db.VarChar(20)

  // Preferences
  preferredLanguage String? @default("es") @map("preferred_language") @db.VarChar(10) // 'es', 'en', etc.
  timezone          String? @default("America/Caracas") @db.VarChar(50)
  currency          String? @default("USD") @db.VarChar(10) // 'USD', 'EUR', etc.

  // Verification status
  emailVerified    Boolean @default(false) @map("email_verified")
  phoneVerified    Boolean @default(false) @map("phone_verified")
  identityVerified Boolean @default(false) @map("identity_verified")

  // Admin-specific fields (optional - only populated for admin users)
  userType         String?   @default("user") @map("user_type") // 'user' or 'admin'
  adminRole        String?   @map("admin_role") @db.VarChar(20) // 'super_admin', 'admin', 'moderator', 'support'
  adminPermissions String[]  @default([]) @map("admin_permissions") // Array of permission strings
  lastAdminLogin   DateTime? @map("last_admin_login")
  adminCreatedAt   DateTime? @map("admin_created_at")
  adminUpdatedAt   DateTime? @updatedAt @map("admin_updated_at")

  // Relations (available for both regular users and admins)
  rides                   Ride[]
  deliveryOrders          DeliveryOrder[]
  wallet                  Wallet?
  ratings                 Rating[]
  emergencyContacts       EmergencyContact[]
  sentMessages            ChatMessage[]            @relation("MessageSender")
  receivedRatings         Rating[]                 @relation("RatedUser")
  notificationPreferences NotificationPreferences?
  pushTokens              PushToken[]
  notifications           Notification[]
  ownedStores             Store[]

  // New services relations
  errands          Errand[]
  parcels          Parcel[]
  cart             Cart?

  // Venezuelan payment system relations
  paymentReferences PaymentReference[]
  paymentGroups     PaymentGroup[]

  // Admin-specific relations
  adminAuditLogs AdminAuditLog[]

  @@map("users")
}

// Stores driver/courier information, their vehicle, and status
model Driver {
  id                 Int      @id @default(autoincrement())
  firstName          String   @map("first_name") @db.VarChar(50)
  lastName           String   @map("last_name") @db.VarChar(50)
  profileImageUrl    String?  @map("profile_image_url")
  carImageUrl        String?  @map("car_image_url")
  carModel           String?  @map("car_model") @db.VarChar(100)
  licensePlate       String?  @unique @map("license_plate") @db.VarChar(20)
  carSeats           Int      @map("car_seats")
  vehicleTypeId      Int?     @map("vehicle_type_id") // Nueva relación con tipo de vehículo
  status             String   @default("offline") @db.VarChar(20)
  verificationStatus String   @default("pending") @map("verification_status") @db.VarChar(20)
  canDoDeliveries    Boolean  @default(false) @map("can_do_deliveries")
  createdAt          DateTime @default(now()) @map("created_at")
  updatedAt          DateTime @default(now()) @updatedAt @map("updated_at")

  // Relations
  vehicleType    VehicleType?     @relation(fields: [vehicleTypeId], references: [id])
  documents      DriverDocument[]
  rides          Ride[]
  deliveryOrders DeliveryOrder[]
  errands         Errand[]
  parcels         Parcel[]

  @@map("drivers")
}

// Stores driver verification documents
model DriverDocument {
  id                 Int      @id @default(autoincrement())
  driverId           Int      @map("driver_id")
  documentType       String   @map("document_type") @db.VarChar(50)
  documentUrl        String   @map("document_url")
  uploadedAt         DateTime @default(now()) @map("uploaded_at")
  verificationStatus String   @default("pending") @map("verification_status") @db.VarChar(20)

  // Relations
  driver Driver @relation(fields: [driverId], references: [id], onDelete: Cascade)

  @@map("driver_documents")
}

// =========================================
// SECTION 2: RIDE-SHARING TABLES
// =========================================

// Defines different ride tiers and their pricing structure
model RideTier {
  id            Int     @id @default(autoincrement())
  name          String  @db.VarChar(50)
  baseFare      Decimal @map("base_fare") @db.Decimal(10, 2)
  perMinuteRate Decimal @map("per_minute_rate") @db.Decimal(10, 2)
  perMileRate   Decimal @map("per_mile_rate") @db.Decimal(10, 2)
  imageUrl      String? @map("image_url")

  // Relations
  rides         Ride[]
  vehicleTypes  TierVehicleType[]

  @@map("ride_tiers")
}

// Defines valid combinations between tiers and vehicle types
model TierVehicleType {
  id            Int         @id @default(autoincrement())
  tierId        Int         @map("tier_id")
  vehicleTypeId Int         @map("vehicle_type_id")
  isActive      Boolean     @default(true) @map("is_active")
  createdAt     DateTime    @default(now()) @map("created_at")

  // Relations
  tier          RideTier    @relation(fields: [tierId], references: [id], onDelete: Cascade)
  vehicleType   VehicleType @relation(fields: [vehicleTypeId], references: [id], onDelete: Cascade)

  @@unique([tierId, vehicleTypeId])
  @@map("tier_vehicle_types")
}

// Stores information about each ride
model Ride {
  rideId                 Int       @id @default(autoincrement()) @map("ride_id")
  originAddress          String    @map("origin_address") @db.VarChar(255)
  destinationAddress     String    @map("destination_address") @db.VarChar(255)
  originLatitude         Decimal   @map("origin_latitude") @db.Decimal(9, 6)
  originLongitude        Decimal   @map("origin_longitude") @db.Decimal(9, 6)
  destinationLatitude    Decimal   @map("destination_latitude") @db.Decimal(9, 6)
  destinationLongitude   Decimal   @map("destination_longitude") @db.Decimal(9, 6)
  rideTime               Int       @map("ride_time")
  farePrice              Decimal   @map("fare_price") @db.Decimal(10, 2)
  paymentStatus          String    @map("payment_status") @db.VarChar(20)
  driverId               Int?      @map("driver_id")
  userId                 Int       @map("user_id")
  tierId                 Int?      @map("tier_id")
  requestedVehicleTypeId Int?      @map("requested_vehicle_type_id") // Tipo de vehículo solicitado
  scheduledFor           DateTime? @map("scheduled_for")
  createdAt              DateTime  @default(now()) @map("created_at")

  // Relations
  driver               Driver?       @relation(fields: [driverId], references: [id])
  tier                 RideTier?     @relation(fields: [tierId], references: [id])
  user                 User?         @relation(fields: [userId], references: [id])
  requestedVehicleType VehicleType?  @relation("RequestedVehicleType", fields: [requestedVehicleTypeId], references: [id])
  ratings              Rating[]
  messages             ChatMessage[]

  @@map("rides")
}

// =========================================
// SECTION 3: MARKETPLACE & DELIVERY TABLES
// =========================================

// Represents businesses on the platform (restaurants, shops, etc.)
model Store {
  id          Int      @id @default(autoincrement())
  name        String   @db.VarChar(150)
  address     String   @db.VarChar(255)
  latitude    Decimal  @db.Decimal(9, 6)
  longitude   Decimal  @db.Decimal(9, 6)
  category    String?  @db.VarChar(50)
  cuisineType String?  @map("cuisine_type") @db.VarChar(50)
  logoUrl     String?  @map("logo_url")
  rating      Decimal  @default(0.00) @db.Decimal(3, 2)
  isOpen      Boolean  @default(true) @map("is_open")
  ownerId     Int?     @map("owner_id")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @default(now()) @updatedAt @map("updated_at")

  // Relations
  products       Product[]
  deliveryOrders DeliveryOrder[]
  ratings        Rating[]
  owner          User?           @relation(fields: [ownerId], references: [id])

  @@map("stores")
}

// Represents items sold by stores
model Product {
  id          Int     @id @default(autoincrement())
  storeId     Int     @map("store_id")
  name        String  @db.VarChar(150)
  description String?
  price       Decimal @db.Decimal(10, 2)
  imageUrl    String? @map("image_url")
  category    String? @db.VarChar(50)
  stock       Int     @default(0)
  isAvailable Boolean @default(true) @map("is_available")

  // Relations
  store      Store       @relation(fields: [storeId], references: [id], onDelete: Cascade)
  orderItems OrderItem[]
  cartItems  CartItem[]

  @@map("products")
}

// Tracks a delivery order from creation to completion
model DeliveryOrder {
  orderId               Int       @id @default(autoincrement()) @map("order_id")
  userId                Int       @map("user_id")
  storeId               Int       @map("store_id")
  courierId             Int?      @map("courier_id")
  deliveryAddress       String    @map("delivery_address") @db.VarChar(255)
  deliveryLatitude      Decimal   @map("delivery_latitude") @db.Decimal(9, 6)
  deliveryLongitude     Decimal   @map("delivery_longitude") @db.Decimal(9, 6)
  totalPrice            Decimal   @map("total_price") @db.Decimal(10, 2)
  deliveryFee           Decimal   @map("delivery_fee") @db.Decimal(10, 2)
  tip                   Decimal   @default(0.00) @db.Decimal(10, 2)
  status                String    @default("pending") @db.VarChar(50)
  paymentStatus         String    @default("pending") @map("payment_status") @db.VarChar(20)
  estimatedDeliveryTime DateTime? @map("estimated_delivery_time")
  actualDeliveryTime    DateTime? @map("actual_delivery_time")
  createdAt             DateTime  @default(now()) @map("created_at")

  // Relations
  user       User?         @relation(fields: [userId], references: [id])
  store      Store         @relation(fields: [storeId], references: [id])
  courier    Driver?       @relation(fields: [courierId], references: [id])
  orderItems OrderItem[]
  ratings    Rating[]
  messages   ChatMessage[]

  @@map("delivery_orders")
}

// Join table for products within a delivery order
model OrderItem {
  id              Int     @id @default(autoincrement())
  orderId         Int     @map("order_id")
  productId       Int     @map("product_id")
  quantity        Int
  priceAtPurchase Decimal @map("price_at_purchase") @db.Decimal(10, 2)

  // Relations
  order   DeliveryOrder @relation(fields: [orderId], references: [orderId], onDelete: Cascade)
  product Product       @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@map("order_items")
}

// =========================================
// SECTION 4: SHARED & GENERAL PURPOSE TABLES
// =========================================

// Manages promotional codes and discounts for rides or deliveries
model Promotion {
  id                 Int       @id @default(autoincrement())
  promoCode          String    @unique @map("promo_code") @db.VarChar(50)
  discountPercentage Decimal?  @map("discount_percentage") @db.Decimal(5, 2)
  discountAmount     Decimal?  @map("discount_amount") @db.Decimal(10, 2)
  expiryDate         DateTime? @map("expiry_date")
  isActive           Boolean   @default(true) @map("is_active")

  @@map("promotions")
}

// Manages user wallet balances
model Wallet {
  id        Int      @id @default(autoincrement())
  userId    Int      @unique @map("user_id")
  balance   Decimal  @default(0.00) @db.Decimal(10, 2)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")

  // Relations
  user               User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  walletTransactions WalletTransaction[]

  @@map("wallets")
}

// Tracks all wallet transactions (credits and debits)
model WalletTransaction {
  id              Int      @id @default(autoincrement())
  walletId        Int      @map("wallet_id")
  amount          Decimal  @db.Decimal(10, 2)
  transactionType String   @map("transaction_type") @db.VarChar(20)
  description     String?
  createdAt       DateTime @default(now()) @map("created_at")

  // Relations
  wallet Wallet @relation(fields: [walletId], references: [id], onDelete: Cascade)

  @@map("wallet_transactions")
}

// Stores ratings for rides, deliveries, or stores
model Rating {
  id            Int      @id @default(autoincrement())
  rideId        Int?     @map("ride_id")
  orderId       Int?     @map("order_id")
  storeId       Int?     @map("store_id")
  ratedByUserId Int      @map("rated_by_user_id")
  ratedUserId   Int?     @map("rated_user_id")
  ratingValue   Int      @map("rating_value")
  comment       String?
  createdAt     DateTime @default(now()) @map("created_at")

  // Relations
  ride      Ride?          @relation(fields: [rideId], references: [rideId])
  order     DeliveryOrder? @relation(fields: [orderId], references: [orderId])
  store     Store?         @relation(fields: [storeId], references: [id])
  ratedBy   User           @relation(fields: [ratedByUserId], references: [id])
  ratedUser User?          @relation("RatedUser", fields: [ratedUserId], references: [id])

  @@map("ratings")
}

// Stores emergency contacts for users
model EmergencyContact {
  id           Int    @id @default(autoincrement())
  userId       Int    @map("user_id")
  contactName  String @map("contact_name") @db.VarChar(100)
  contactPhone String @map("contact_phone") @db.VarChar(20)

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("emergency_contacts")
}

// Stores chat messages for rides, deliveries, errands, and parcels
model ChatMessage {
  id          Int      @id @default(autoincrement())
  rideId      Int?     @map("ride_id")
  orderId     Int?     @map("order_id")
  errandId      Int?     @map("errand_id")
  parcelId      Int?     @map("parcel_id")
  senderId    Int      @map("sender_id")
  messageText String   @map("message_text")
  createdAt   DateTime @default(now()) @map("created_at")

  // Relations
  ride    Ride?          @relation(fields: [rideId], references: [rideId])
  order   DeliveryOrder? @relation(fields: [orderId], references: [orderId])
  errand  Errand?        @relation(fields: [errandId], references: [id])
  parcel  Parcel?        @relation(fields: [parcelId], references: [id])
  sender  User           @relation("MessageSender", fields: [senderId], references: [id])

  @@map("chat_messages")
}

// =========================================
// SECTION 5: NOTIFICATION SYSTEM TABLES
// =========================================

// Stores user notification preferences
model NotificationPreferences {
  id              Int      @id @default(autoincrement())
  userId          Int      @unique @map("user_id")
  pushEnabled     Boolean  @default(true) @map("push_enabled")
  smsEnabled      Boolean  @default(false) @map("sms_enabled")
  emailEnabled    Boolean  @default(false) @map("email_enabled")
  rideUpdates     Boolean  @default(true) @map("ride_updates")
  driverMessages  Boolean  @default(true) @map("driver_messages")
  promotional     Boolean  @default(false) @map("promotional")
  emergencyAlerts Boolean  @default(true) @map("emergency_alerts")
  createdAt       DateTime @default(now()) @map("created_at")
  updatedAt       DateTime @default(now()) @updatedAt @map("updated_at")

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("notification_preferences")
}

// Stores push notification tokens for devices
model PushToken {
  id         Int       @id @default(autoincrement())
  userId     Int       @map("user_id")
  token      String    @unique @db.VarChar(255)
  deviceType String?   @map("device_type") @db.VarChar(20) // 'ios', 'android', 'web'
  deviceId   String?   @map("device_id") @db.VarChar(255)
  isActive   Boolean   @default(true) @map("is_active")
  lastUsedAt DateTime? @map("last_used_at")
  createdAt  DateTime  @default(now()) @map("created_at")
  updatedAt  DateTime  @default(now()) @updatedAt @map("updated_at")

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, isActive])
  @@map("push_tokens")
}

// Stores notification history and delivery status
model Notification {
  id          Int       @id @default(autoincrement())
  userId      Int       @map("user_id")
  type        String    @db.VarChar(50) // 'ride_accepted', 'driver_arrived', etc.
  title       String    @db.VarChar(255)
  message     String?
  data        Json? // Additional data for the notification
  isRead      Boolean   @default(false) @map("is_read")
  pushSent    Boolean   @default(false) @map("push_sent")
  pushSentAt  DateTime? @map("push_sent_at")
  smsSent     Boolean   @default(false) @map("sms_sent")
  smsSentAt   DateTime? @map("sms_sent_at")
  emailSent   Boolean   @default(false) @map("email_sent")
  emailSentAt DateTime? @map("email_sent_at")
  createdAt   DateTime  @default(now()) @map("created_at")
  readAt      DateTime? @map("read_at")

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, createdAt])
  @@index([type, createdAt])
  @@map("notifications")
}

// =========================================
// ADMIN AUDIT SYSTEM TABLES
// =========================================

// Stores audit logs for admin actions
model AdminAuditLog {
  id         Int      @id @default(autoincrement())
  adminId    Int      @map("admin_id") // References User.id for admin users
  action     String   @db.VarChar(100) // 'create', 'update', 'delete', 'login', etc.
  resource   String   @db.VarChar(50) // 'user', 'driver', 'ride', etc.
  resourceId String?  @map("resource_id") @db.VarChar(50)
  oldValue   Json?    @map("old_value")
  newValue   Json?    @map("new_value")
  ipAddress  String?  @map("ip_address") @db.VarChar(45)
  userAgent  String?  @map("user_agent") @db.Text
  timestamp  DateTime @default(now())
  createdAt  DateTime @default(now()) @map("created_at")

  // Relation to admin user
  admin User @relation(fields: [adminId], references: [id], onDelete: Cascade)

  @@map("admin_audit_logs")
}

// =========================================
// VENEZUELAN PAYMENT SYSTEM TABLES
// =========================================

// Stores bank payment references for Venezuelan payment system
model PaymentReference {
  id              Int       @id @default(autoincrement())
  referenceNumber String    @unique @db.VarChar(20) // 20-digit reference number
  bankCode        String    @db.VarChar(10) // Bank code (0102, 0105, etc.)
  amount          Decimal   @db.Decimal(10, 2) // Payment amount in VES
  currency        String    @default("VES") @db.VarChar(3)
  userId          Int       @map("user_id") // User who generated the reference
  serviceType     String    @db.VarChar(20) // 'ride', 'delivery', 'errand', 'parcel'
  serviceId       Int       @map("service_id") // ID of the service (rideId, orderId, etc.)
  paymentMethod   String    @db.VarChar(20) // 'transfer', 'pago_movil', 'zelle', 'bitcoin', 'cash'
  status          String    @default("pending") @db.VarChar(20) // 'pending', 'confirmed', 'expired', 'failed'
  isPartial       Boolean   @default(false) @map("is_partial") // True for partial payments
  groupId         String?   @map("group_id") // UUID for grouping multiple payments
  expiresAt       DateTime  @map("expires_at") // Reference expiration time
  confirmedAt     DateTime? @map("confirmed_at") // When payment was confirmed
  createdAt       DateTime  @default(now()) @map("created_at")
  updatedAt       DateTime  @default(now()) @updatedAt @map("updated_at")

  // Relations
  user             User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  paymentGroup     PaymentGroup?     @relation(fields: [groupId], references: [id], onDelete: SetNull)
  bankTransactions BankTransaction[]

  @@index([referenceNumber])
  @@index([userId, status])
  @@index([serviceType, serviceId])
  @@index([serviceType, serviceId, isPartial])
  @@index([groupId])
  @@index([expiresAt])
  @@map("payment_references")
}

// Tracks payment groups for multi-method payments
model PaymentGroup {
  id              String    @id @default(cuid()) // UUID for payment groups
  userId          Int       @map("user_id")
  serviceType     String    @db.VarChar(20) // 'ride', 'delivery', 'errand', 'parcel'
  serviceId       Int       @map("service_id") // ID of the service
  totalAmount     Decimal   @map("total_amount") @db.Decimal(10, 2) // Total amount to pay
  paidAmount      Decimal   @default(0.00) @map("paid_amount") @db.Decimal(10, 2) // Amount paid so far
  remainingAmount Decimal   @map("remaining_amount") @db.Decimal(10, 2) // Amount still needed
  status          String    @default("incomplete") @db.VarChar(20) // 'incomplete', 'complete', 'cancelled', 'expired'
  expiresAt       DateTime  @map("expires_at") // Group expiration (24 hours from first payment)
  completedAt     DateTime? @map("completed_at") // When payment was fully completed
  createdAt       DateTime  @default(now()) @map("created_at")
  updatedAt       DateTime  @default(now()) @updatedAt @map("updated_at")

  // Relations
  user              User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  paymentReferences PaymentReference[]

  @@index([userId])
  @@index([serviceType, serviceId])
  @@index([status])
  @@index([expiresAt])
  @@map("payment_groups")
}

// Stores confirmed bank transactions
model BankTransaction {
  id                    Int      @id @default(autoincrement())
  paymentReferenceId    Int      @map("payment_reference_id")
  bankTransactionId     String   @db.VarChar(100) // Transaction ID from bank
  bankResponse          Json     @map("bank_response") // Full response from bank API
  confirmedAmount       Decimal  @db.Decimal(10, 2) // Confirmed amount by bank
  confirmationTimestamp DateTime @map("confirmation_timestamp")
  createdAt             DateTime @default(now()) @map("created_at")

  // Relations
  paymentReference PaymentReference @relation(fields: [paymentReferenceId], references: [id], onDelete: Cascade)

  @@index([paymentReferenceId])
  @@index([bankTransactionId])
  @@map("bank_transactions")
}

// =========================================
// ERRAND SERVICE TABLES
// =========================================

// Stores errand requests where drivers perform personal tasks
model Errand {
  id                 Int      @id @default(autoincrement())
  userId             Int      @map("user_id")
  driverId           Int?     @map("driver_id")
  description        String   @db.VarChar(300)
  itemsList          String?  @db.Text
  pickupAddress      String   @db.VarChar(255)
  pickupLat          Decimal  @db.Decimal(9, 6)
  pickupLng          Decimal  @db.Decimal(9, 6)
  dropoffAddress     String   @db.VarChar(255)
  dropoffLat         Decimal  @db.Decimal(9, 6)
  dropoffLng         Decimal  @db.Decimal(9, 6)
  status             String   @default("requested") @db.VarChar(20)
  itemsCost          Decimal? @db.Decimal(10, 2)
  serviceFee         Decimal? @db.Decimal(10, 2)
  totalAmount        Decimal? @db.Decimal(10, 2)
  shoppingNotes      String?  @db.Text
  createdAt          DateTime @default(now()) @map("created_at")
  updatedAt          DateTime @default(now()) @updatedAt @map("updated_at")

  // Relations
  user     User         @relation(fields: [userId], references: [id])
  driver   Driver?      @relation(fields: [driverId], references: [id])
  messages ChatMessage[]

  @@map("errands")
}

// =========================================
// PARCEL SERVICE TABLES
// =========================================

// Stores parcel delivery requests
model Parcel {
  id                Int      @id @default(autoincrement())
  userId            Int      @map("user_id")
  driverId          Int?     @map("driver_id")
  pickupAddress     String   @db.VarChar(255)
  pickupLat         Decimal  @db.Decimal(9, 6)
  pickupLng         Decimal  @db.Decimal(9, 6)
  dropoffAddress    String   @db.VarChar(255)
  dropoffLat        Decimal  @db.Decimal(9, 6)
  dropoffLng        Decimal  @db.Decimal(9, 6)
  type              String   @db.VarChar(50) // 'documents', 'small_package', 'large_package'
  description       String?  @db.Text
  weight            Decimal? @db.Decimal(5, 2)
  dimensions        String?  @db.VarChar(50) // '20x15x10'
  status            String   @default("requested") @db.VarChar(20)
  serviceFee        Decimal? @db.Decimal(10, 2)
  totalAmount       Decimal? @db.Decimal(10, 2)
  proofOfPickup     String?  @map("proof_of_pickup") // Photo URL
  proofOfDelivery   String?  @map("proof_of_delivery") // Photo/Signature URL
  recipientName     String?  @map("recipient_name")
  recipientPhone    String?  @map("recipient_phone")
  createdAt         DateTime @default(now()) @map("created_at")
  updatedAt         DateTime @default(now()) @updatedAt @map("updated_at")

  // Relations
  user     User         @relation(fields: [userId], references: [id])
  driver   Driver?      @relation(fields: [driverId], references: [id])
  messages ChatMessage[]

  @@map("parcels")
}

// =========================================
// SHOPPING CART TABLES
// =========================================

// Stores user shopping carts
model Cart {
  id         Int      @id @default(autoincrement())
  userId     Int      @unique @map("user_id")
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @default(now()) @updatedAt @map("updated_at")

  // Relations
  user     User       @relation(fields: [userId], references: [id])
  items    CartItem[]

  @@map("carts")
}

// Stores items in shopping carts
model CartItem {
  id         Int     @id @default(autoincrement())
  cartId     Int     @map("cart_id")
  productId  Int     @map("product_id")
  quantity   Int     @default(1)
  notes      String? @db.VarChar(255)

  // Relations
  cart     Cart    @relation(fields: [cartId], references: [id], onDelete: Cascade)
  product  Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([cartId, productId])
  @@map("cart_items")
}

// =========================================
// END OF SCHEMA
// =========================================
