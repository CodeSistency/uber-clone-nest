---
alwaysApply: true
description: Gu√≠a general de arquitectura y estructura del proyecto Uber Clone
---

# üèóÔ∏è Arquitectura del Proyecto Uber Clone

## üìã Estructura General

Este es un **sistema completo de ride-sharing y delivery** construido con **NestJS**, **PostgreSQL**, **WebSockets** y m√∫ltiples servicios de terceros.

### üèõÔ∏è Arquitectura Principal

- **Framework**: NestJS con TypeScript
- **Base de datos**: PostgreSQL con Prisma ORM
- **Autenticaci√≥n**: JWT (preparado para Clerk)
- **Tiempo real**: Socket.IO para WebSockets
- **Pagos**: Stripe integration
- **Notificaciones**: Push, SMS (Twilio), Email (Firebase)
- **Cache**: Redis para pub/sub y cache
- **Validaci√≥n**: class-validator + class-transformer

## üìÅ Estructura de M√≥dulos

### Core Modules
- **`auth/`**: Autenticaci√≥n JWT con guards y estrategias
- **`users/`**: Gesti√≥n de usuarios y perfiles
- **`drivers/`**: Gesti√≥n de conductores y verificaci√≥n
- **`rides/`**: Sistema de viajes con tiers de precio
- **`chat/`**: Mensajer√≠a entre usuarios y conductores

### Business Modules
- **`promotions/`**: C√≥digos de descuento y promociones
- **`wallet/`**: Billetera digital y transacciones
- **`stripe/`**: Procesamiento de pagos con Stripe
- **`emergency-contacts/`**: Contactos de emergencia
- **`safety/`**: Funcionalidades de seguridad

### Infrastructure Modules
- **`prisma/`**: Configuraci√≥n de base de datos
- **`redis/`**: Cache y comunicaci√≥n pub/sub
- **`websocket/`**: Comunicaci√≥n en tiempo real
- **`realtime/`**: Seguimiento en tiempo real de viajes
- **`notifications/`**: Sistema de notificaciones completo

## üîÑ Flujo de Datos T√≠pico

### 1. Ride Request Flow
```
Usuario ‚Üí API Gateway ‚Üí Auth Guard ‚Üí Rides Service ‚Üí Prisma ‚Üí WebSocket Broadcast ‚Üí Drivers
```

### 2. Payment Flow
```
Ride Complete ‚Üí Stripe Service ‚Üí Wallet Update ‚Üí Notification ‚Üí User Email/Push
```

### 3. Real-time Tracking
```
Driver Location ‚Üí Redis Pub/Sub ‚Üí WebSocket ‚Üí User App ‚Üí Map Update
```

## üóÑÔ∏è Base de Datos - Entidades Principales

### Users & Authentication
- **User**: Perfiles de usuario con wallet integrada
- **EmergencyContact**: Contactos de emergencia por usuario

### Ride Sharing
- **Driver**: Conductores con verificaci√≥n y documentos
- **Ride**: Viajes con ubicaci√≥n, precio y estado
- **RideTier**: Niveles de servicio (UberX, UberXL, etc.)

### Marketplace & Delivery
- **Store**: Comercios en la plataforma
- **Product**: Productos de los comercios
- **DeliveryOrder**: √ìrdenes de delivery

### Financial
- **Wallet**: Billetera digital de usuarios
- **WalletTransaction**: Historial de transacciones
- **Promotion**: C√≥digos de descuento

### Communication
- **ChatMessage**: Mensajes entre usuarios/conductores
- **Rating**: Calificaciones para viajes y deliveries

### Notifications
- **NotificationPreferences**: Preferencias de notificaci√≥n
- **PushToken**: Tokens para notificaciones push
- **Notification**: Historial de notificaciones enviadas

## üîê Sistema de Autenticaci√≥n

### JWT Authentication
- **Access Token**: 1 hora de expiraci√≥n
- **Refresh Token**: 7 d√≠as de expiraci√≥n
- **Guards**: Protecci√≥n de rutas con roles
- **Strategies**: Validaci√≥n de tokens JWT

### Dual Auth System
- **Custom JWT**: Implementado y funcional
- **Clerk**: Preparado pero no usado actualmente

## ‚ö° WebSocket Events

### Ride Events
- `ride:join` - Usuario se une al seguimiento
- `ride:accept` - Conductor acepta viaje
- `ride:complete` - Viaje completado
- `driver:location:update` - Actualizaci√≥n de ubicaci√≥n

### Emergency Events
- `emergency:sos` - Alerta de emergencia
- `emergency:sos-triggered` - SOS enviado

### Chat Events
- `chat:message` - Nuevo mensaje
- `chat:new-message` - Broadcast de mensaje

## üìä Patrones de Dise√±o Usados

### Repository Pattern
- **PrismaService**: Acceso unificado a base de datos
- **Services**: L√≥gica de negocio por m√≥dulo

### Observer Pattern
- **WebSocket Gateway**: Eventos en tiempo real
- **Notification System**: M√∫ltiples canales

### Strategy Pattern
- **Auth Strategies**: JWT vs Clerk
- **Notification Channels**: Push, SMS, Email

### Factory Pattern
- **DTOs**: Creaci√≥n de objetos de transferencia
- **Interceptors**: Transformaci√≥n de respuestas

## üöÄ Endpoints Principales

### Authentication
- `POST /auth/register` - Registro de usuarios
- `POST /auth/login` - Login de usuarios
- `POST /auth/refresh` - Refresh de tokens

### Users
- `GET /users/profile` - Perfil de usuario
- `PUT /users/profile` - Actualizar perfil
- `GET /users/rides` - Historial de viajes

### Rides
- `POST /rides` - Crear viaje
- `GET /rides/:id` - Detalles del viaje
- `POST /rides/:id/accept` - Aceptar viaje (driver)
- `POST /rides/:id/rate` - Calificar viaje

### Wallet
- `GET /wallet/balance` - Balance de wallet
- `POST /wallet/add-funds` - Agregar fondos
- `GET /wallet/transactions` - Historial de transacciones

## üß™ Testing Strategy

### Unit Tests
- Servicios individuales
- Utilidades y helpers
- Validaciones de DTOs

### Integration Tests
- Endpoints completos
- Base de datos interactions
- Servicios externos

### E2E Tests
- Flujos completos de usuario
- WebSocket connections
- Payment flows

## üîß Configuraci√≥n

### Environment Variables
```bash
# Database
DATABASE_URL=postgresql://...

# JWT
JWT_SECRET=your-secret-key
JWT_EXPIRES_IN=1h
JWT_REFRESH_EXPIRES_IN=7d

# Stripe
STRIPE_SECRET_KEY=sk_test_...
STRIPE_WEBHOOK_SECRET=whsec_...

# Redis
REDIS_URL=redis://localhost:6379

# Clerk (opcional)
CLERK_SECRET_KEY=sk_test_...

# Twilio (SMS)
TWILIO_ACCOUNT_SID=...
TWILIO_AUTH_TOKEN=...
TWILIO_PHONE_NUMBER=...
```

### Scripts Disponibles
```bash
npm run start:dev      # Desarrollo con hot reload
npm run build         # Build de producci√≥n
npm run test          # Ejecutar tests
npm run db:seed       # Poblar base de datos
npm run db:reset      # Reset completo de BD
```